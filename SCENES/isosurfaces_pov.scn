// POV-Ray's isosurface example - adapted for GEM

//	Persistence of Vision Raytracer Version 3.5 Scene Description File
//	File: isosurfaces.pov
//	Last updated: 8/5/01
//	Author: Chris Huff
//	Description: Various isosurfaces.
//	From left to right, top to bottom:
//	1: simple plane
//	2: simple sphere
//	3: simple cylinder
//	4: parabolic (like a headlight reflector)

//	5: parallel ripples on a plane
//	6: radial ridges on a sphere
//	7: a bumpy cylinder
//	8: a potato chip

//	9: radial ripples on a plane
//	10: dog chew toy
//	11: simple cone (cylinder with varying radius)
//		This can be made single-ended, replace abs(y) with max(y, 0).
//	12: a kind of spindle shape
//
//*******************************************

// Include a collection of pre-defined colors.
include "colors.inc"

// Include some pre-defined basic surface types.
include "basicsurfs.inc"

main
{
	vector CamLoc = <0, -0.01,-10>;
	float ScaleFactor = 1/vmag(<1, 1, 1>);

	viewport CamLoc, <0, 0, 0>, 45;

	light
	{
		location = CamLoc;
		color = White*0.35;
	}

	light
	{
		location = <-50, -150,-75>;
		color = White;
		}

	box <-4,-3, 1>, < 4, 3, 2>
	{
		surface
		{
			surface_shader
			{
				color = checker(O) ? < 0.05, 0, 0.35> : White;
			}
		}
	}


	fn_xyz y,
	 <-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Red; }

		scale ScaleFactor;
		rotate <-36, -24, 0>;
		translate <-3, -2, 0>;
	}


	fn_xyz sqrt(x*x + y*y + z*z) - 1,
	<-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Red; }
		scale ScaleFactor;
		rotate <-36, -24, 0>;
		translate <-1, -2, 0>;
	}

	fn_xyz sqrt(x*x + z*z) - 1,
	 <-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Red; }
		scale ScaleFactor;
		rotate <-36, -24, 0>;
		translate < 1, -2, 0>;
	}


	fn_xyz y - sin(x*4*PI)*0.1,
	 <-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Green; }
		scale ScaleFactor;
		rotate <-36, -24, 0>;
		translate <-3, 0, 0>;
	}

	//atan(x, z) = angle around y axis in radians
	fn_xyz sqrt(x*x + y*y + z*z) - 0.9
			+ sin(12*atan2(x, z))*0.1,
	 <-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Green; }
		scale ScaleFactor;
		rotate <-36, -24, 0>;
		translate <-1, 0, 0>;
	}

	fn_xyz sqrt(x*x + z*z) - 1
			+ noise(<x*3, y*3, z*3>)*0.25,
	 <-1.5,-1,-1.5>, < 1.5, 1, 1.5>, <32, 32, 32>
	{
		Gloss { color = Green; }
		scale ScaleFactor;
		rotate <-36, -24, 0>;
		translate < 1, 0, 0>;
	}



	fn_xyz y - cos(sqrt(x*x + z*z)*4*PI)*0.1,
	 <-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Blue; }
		scale ScaleFactor;
		rotate <-36, -24, 0>;
		translate <-3,2, 0>;
	}

	//atan(x, z) = angle around y axis in radians
	fn_xyz sqrt(x*x + y*y + z*z) - 0.9
			+ sin(12*atan2(x, z))*sin(8*atan2(y, sqrt(x*x + z*z)))*0.1,
	 <-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Blue; }
		scale ScaleFactor;
		rotate <-36, -24, 0>;
		translate <-1,2, 0>;
	}

	fn_xyz sqrt(x*x + z*z) - abs(y),
	 <-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Blue; }
		scale ScaleFactor;
		rotate < 36, 24, 0>;
		translate < 1,2, 0>;
	}

	fn_xyz y - (x*x + z*z)*0.5,
	 <-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Yellow; }
		scale ScaleFactor;
		rotate <-36, -24, 0>;
		translate < 3, -2, 0>;
	}

	fn_xyz y - x*x + z*z,
	 <-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Yellow; }
		scale ScaleFactor;
		rotate <-36,24, 0>;
		translate < 3, 0, 0>;
	}

	fn_xyz x*x + z*z - y*y - 0.25,
	 <-1,-1,-1>, < 1, 1, 1>, <32, 32, 32>
	{
		Gloss { color = Yellow; }
		scale ScaleFactor;
		rotate < 36,24, 0>;
		translate < 3,2, 0>;
	}
} 
